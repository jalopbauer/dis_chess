[0m[[0m[0mdebug[0m] [0m[0mCreated transactional ClassFileManager with tempDir = /home/indigo/proyects/dis_chess/code/target/scala-3.2.0/classes.bak[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to delete class files:[0m
[0m[[0m[0mdebug[0m] [0m[0m	OrCompositeValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsTwoStraightUpValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsLShapedValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Piece.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PlayerMovement$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularKingsFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	CannotPlayPieceFromDifferentColor.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBishopsFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularQueensFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsEmptyOrPieceIsDifferentColorValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneDiagonalDownValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneDiagonalUpValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MiPiecesToChessPiece.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameData$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneUpIsEmptyValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	BoardPieceMapFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsStraightUpBottomColorValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Main.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameEnd.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	CheckValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnDiagonalMovementValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	KnightValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneStraightRespectingColorValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Game.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularSingleColorBishopFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightDownAndOneForwardIsEmptyValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneStraightUpValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularPawnsFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsTwoStraightDownValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	QueenValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToCoordinateIsInvalid.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBoardMovementValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameData.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceType$$anon$1.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularGame.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MyGameEngine.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MoveIsInvalid.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularKnightsFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	FromCoordinateIsInvalid$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameInterruptionToMoveResult.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsDiagonalUpBottomColorValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsDiagonalValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceColorIsExpectedValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsDiagonalValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MoveToMovement.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneDiagonalUpValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBoard$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsStraightValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsTwoStraightUpValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PostMovementValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	DefaultPreMovementValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	AroundToCoordinateValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBoardFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsStraightDownTopColorValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBoardMovementValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	DiagonalIsEmptyValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	CannotPlayPieceFromDifferentColor$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightUpAndOneForwardIsEmptyWithYValueValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	OrOrCompositeValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneStraightRespectingColorValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MyPieceColorToPlayerColor.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneStraightDownValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBishopsFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	KingValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceColor.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Board.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MyPieceColorToPlayerColor$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PlayerCoordinate.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PreMovementValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnOneStraightMovementValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Movement.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Player$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameAction.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	NewGameStateGenerator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	DiagonalOrStraightIsEmptyValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsDiagonalUpBottomColorValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	FromCoordinateIsInvalid.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	KingValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsNotEmptyValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPiecePositionIsDifferentColorValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsDiagonalDownTopColorValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularPawnsFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	BishopValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameInterruptionToMoveResult$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	NoPieceInFromCoordinate$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	YValueFromCoordinateIsExpectedValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	YcoordPawnsFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	YValueFromCoordinateIsExpectedValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneUpIsEmptyValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBoardFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MyCoordinateToPosition$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightUpAndOneForwardIsEmptyWithYValueValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneDiagonalRespectingColorValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	AndCompositeValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	CheckValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	InitialStateFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Coordinate$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	AroundToCoordinateValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	QueenValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	BishopValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsTwoStraightDownValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsDiagonalDownTopColorValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsEmptyValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceType$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Piece$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	InitialStateFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceColor$$anon$1.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Turn$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	StraightlIsEmptyValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MiPiecesToChessPiece$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsStraightValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnOneStraightMovementValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularSingleColorRooksFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceColorIsExpectedValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Player.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsEmptyValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	DiagonalOrStraightIsEmptyValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneStraightDownValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MyCoordinateToPosition.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularKingsFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightDownAndOneForwardIsEmptyValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MoveIsInvalid$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsEmptyOrPieceIsDifferentColorValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MoveToMovement$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPiecePositionIsDifferentColorValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightUpAndOneForwardIsEmptyValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Main$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	KingWasEatenValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularGame$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RookValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightDownAndOneForwardIsEmptyWithYValueValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	DiagonalIsEmptyValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneDiagonalRespectingColorValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	BoardFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MyGameApplication.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	NewGameStateGenerator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnDiagonalMovementValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	KingWasEatenValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsStraightDownTopColorValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBoard.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightDownAndOneForwardIsEmptyWithYValueValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularSingleColorKinghtFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	StraightlIsEmptyValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsLShapedValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneStraightUpValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	NoPieceInFromCoordinate.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToCoordinateIsInvalid$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	KingWasEaten.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Turn.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RookValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularRooksFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	KingWasEaten$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnTwoStraightMovementValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneDiagonalDownValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneDownIsEmptyValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsStraightUpBottomColorValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Movement$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularSingleColorBishopFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnTwoStraightMovementValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	YcoordPawnsFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularSingleColorRooksFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	KnightValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceType.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	DefaultPreMovementValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularKnightsFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PlayerCoordinate$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightUpAndOneForwardIsEmptyValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceColor$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularRooksFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularSingleColorKinghtFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PlayerMovement.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsNotEmptyValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularQueensFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneDownIsEmptyValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Coordinate.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameInterruption.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	OrCompositeValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsTwoStraightUpValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsLShapedValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Piece.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PlayerMovement$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularKingsFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	CannotPlayPieceFromDifferentColor.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBishopsFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularQueensFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsEmptyOrPieceIsDifferentColorValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneDiagonalDownValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneDiagonalUpValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MiPiecesToChessPiece.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameData$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneUpIsEmptyValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	BoardPieceMapFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsStraightUpBottomColorValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Main.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameEnd.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	CheckValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnDiagonalMovementValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	KnightValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneStraightRespectingColorValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Game.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularSingleColorBishopFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightDownAndOneForwardIsEmptyValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneStraightUpValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularPawnsFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsTwoStraightDownValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	QueenValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToCoordinateIsInvalid.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBoardMovementValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameData.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceType$$anon$1.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularGame.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MyGameEngine.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MoveIsInvalid.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularKnightsFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	FromCoordinateIsInvalid$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameInterruptionToMoveResult.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsDiagonalUpBottomColorValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsDiagonalValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceColorIsExpectedValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsDiagonalValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MoveToMovement.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneDiagonalUpValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBoard$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsStraightValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsTwoStraightUpValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PostMovementValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	DefaultPreMovementValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	AroundToCoordinateValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBoardFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsStraightDownTopColorValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBoardMovementValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	DiagonalIsEmptyValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	CannotPlayPieceFromDifferentColor$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightUpAndOneForwardIsEmptyWithYValueValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	OrOrCompositeValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneStraightRespectingColorValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MyPieceColorToPlayerColor.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneStraightDownValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBishopsFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	KingValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceColor.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Board.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MyPieceColorToPlayerColor$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PlayerCoordinate.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PreMovementValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnOneStraightMovementValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Movement.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Player$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameAction.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	NewGameStateGenerator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	DiagonalOrStraightIsEmptyValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsDiagonalUpBottomColorValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	FromCoordinateIsInvalid.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	KingValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsNotEmptyValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPiecePositionIsDifferentColorValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsDiagonalDownTopColorValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularPawnsFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	BishopValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameInterruptionToMoveResult$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	NoPieceInFromCoordinate$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	YValueFromCoordinateIsExpectedValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	YcoordPawnsFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	YValueFromCoordinateIsExpectedValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneUpIsEmptyValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBoardFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MyCoordinateToPosition$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightUpAndOneForwardIsEmptyWithYValueValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneDiagonalRespectingColorValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	AndCompositeValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	CheckValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	InitialStateFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Coordinate$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	AroundToCoordinateValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	QueenValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	BishopValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsTwoStraightDownValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsDiagonalDownTopColorValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsEmptyValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceType$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Piece$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	InitialStateFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceColor$$anon$1.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Turn$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	StraightlIsEmptyValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MiPiecesToChessPiece$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsStraightValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnOneStraightMovementValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularSingleColorRooksFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceColorIsExpectedValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Player.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsEmptyValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	DiagonalOrStraightIsEmptyValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneStraightDownValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MyCoordinateToPosition.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularKingsFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightDownAndOneForwardIsEmptyValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MoveIsInvalid$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsEmptyOrPieceIsDifferentColorValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MoveToMovement$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPiecePositionIsDifferentColorValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightUpAndOneForwardIsEmptyValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Main$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	KingWasEatenValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularGame$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RookValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightDownAndOneForwardIsEmptyWithYValueValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	DiagonalIsEmptyValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneDiagonalRespectingColorValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	BoardFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MyGameApplication.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	NewGameStateGenerator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnDiagonalMovementValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	KingWasEatenValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsStraightDownTopColorValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBoard.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightDownAndOneForwardIsEmptyWithYValueValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularSingleColorKinghtFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	StraightlIsEmptyValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsLShapedValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneStraightUpValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	NoPieceInFromCoordinate.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToCoordinateIsInvalid$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	KingWasEaten.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Turn.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RookValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularRooksFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	KingWasEaten$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnTwoStraightMovementValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneDiagonalDownValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneDownIsEmptyValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsStraightUpBottomColorValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Movement$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularSingleColorBishopFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnTwoStraightMovementValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	YcoordPawnsFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularSingleColorRooksFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	KnightValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceType.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	DefaultPreMovementValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularKnightsFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PlayerCoordinate$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightUpAndOneForwardIsEmptyValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceColor$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularRooksFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularSingleColorKinghtFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PlayerMovement.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsNotEmptyValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularQueensFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneDownIsEmptyValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Coordinate.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameInterruption.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0mWe backup class files:[0m
[0m[[0m[0mdebug[0m] [0m[0m	OrCompositeValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsTwoStraightUpValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsLShapedValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Piece.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PlayerMovement$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularKingsFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	CannotPlayPieceFromDifferentColor.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBishopsFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularQueensFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsEmptyOrPieceIsDifferentColorValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneDiagonalDownValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneDiagonalUpValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MiPiecesToChessPiece.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameData$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneUpIsEmptyValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	BoardPieceMapFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsStraightUpBottomColorValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Main.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameEnd.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	CheckValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnDiagonalMovementValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	KnightValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneStraightRespectingColorValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Game.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularSingleColorBishopFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightDownAndOneForwardIsEmptyValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneStraightUpValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularPawnsFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsTwoStraightDownValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	QueenValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToCoordinateIsInvalid.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBoardMovementValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameData.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceType$$anon$1.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularGame.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MyGameEngine.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MoveIsInvalid.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularKnightsFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	FromCoordinateIsInvalid$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameInterruptionToMoveResult.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsDiagonalUpBottomColorValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsDiagonalValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceColorIsExpectedValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsDiagonalValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MoveToMovement.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneDiagonalUpValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBoard$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsStraightValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsTwoStraightUpValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PostMovementValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	DefaultPreMovementValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	AroundToCoordinateValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBoardFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsStraightDownTopColorValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBoardMovementValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	DiagonalIsEmptyValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	CannotPlayPieceFromDifferentColor$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightUpAndOneForwardIsEmptyWithYValueValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	OrOrCompositeValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneStraightRespectingColorValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MyPieceColorToPlayerColor.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneStraightDownValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBishopsFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	KingValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceColor.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Board.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MyPieceColorToPlayerColor$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PlayerCoordinate.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PreMovementValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnOneStraightMovementValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Movement.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Player$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameAction.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	NewGameStateGenerator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	DiagonalOrStraightIsEmptyValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsDiagonalUpBottomColorValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	FromCoordinateIsInvalid.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	KingValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsNotEmptyValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPiecePositionIsDifferentColorValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsDiagonalDownTopColorValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularPawnsFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	BishopValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameInterruptionToMoveResult$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	NoPieceInFromCoordinate$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	YValueFromCoordinateIsExpectedValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	YcoordPawnsFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	YValueFromCoordinateIsExpectedValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneUpIsEmptyValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBoardFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MyCoordinateToPosition$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightUpAndOneForwardIsEmptyWithYValueValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneDiagonalRespectingColorValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	AndCompositeValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	CheckValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	InitialStateFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Coordinate$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	AroundToCoordinateValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	QueenValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	BishopValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsTwoStraightDownValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsDiagonalDownTopColorValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsEmptyValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceType$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Piece$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	InitialStateFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceColor$$anon$1.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Turn$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	StraightlIsEmptyValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MiPiecesToChessPiece$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsStraightValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnOneStraightMovementValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularSingleColorRooksFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceColorIsExpectedValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Player.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsEmptyValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	DiagonalOrStraightIsEmptyValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneStraightDownValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MyCoordinateToPosition.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularKingsFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightDownAndOneForwardIsEmptyValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MoveIsInvalid$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsEmptyOrPieceIsDifferentColorValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MoveToMovement$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPiecePositionIsDifferentColorValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightUpAndOneForwardIsEmptyValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Main$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	KingWasEatenValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularGame$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RookValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightDownAndOneForwardIsEmptyWithYValueValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	DiagonalIsEmptyValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneDiagonalRespectingColorValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	BoardFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MyGameApplication.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	NewGameStateGenerator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnDiagonalMovementValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	KingWasEatenValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsStraightDownTopColorValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBoard.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightDownAndOneForwardIsEmptyWithYValueValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularSingleColorKinghtFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	StraightlIsEmptyValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsLShapedValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneStraightUpValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	NoPieceInFromCoordinate.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToCoordinateIsInvalid$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	KingWasEaten.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Turn.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RookValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularRooksFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	KingWasEaten$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnTwoStraightMovementValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneDiagonalDownValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneDownIsEmptyValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsStraightUpBottomColorValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Movement$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularSingleColorBishopFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnTwoStraightMovementValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	YcoordPawnsFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularSingleColorRooksFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	KnightValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceType.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	DefaultPreMovementValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularKnightsFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PlayerCoordinate$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightUpAndOneForwardIsEmptyValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceColor$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularRooksFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularSingleColorKinghtFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PlayerMovement.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsNotEmptyValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularQueensFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneDownIsEmptyValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Coordinate.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameInterruption.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	OrCompositeValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsTwoStraightUpValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsLShapedValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Piece.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PlayerMovement$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularKingsFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	CannotPlayPieceFromDifferentColor.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBishopsFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularQueensFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsEmptyOrPieceIsDifferentColorValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneDiagonalDownValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneDiagonalUpValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MiPiecesToChessPiece.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameData$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneUpIsEmptyValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	BoardPieceMapFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsStraightUpBottomColorValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Main.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameEnd.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	CheckValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnDiagonalMovementValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	KnightValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneStraightRespectingColorValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Game.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularSingleColorBishopFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightDownAndOneForwardIsEmptyValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneStraightUpValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularPawnsFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsTwoStraightDownValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	QueenValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToCoordinateIsInvalid.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBoardMovementValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameData.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceType$$anon$1.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularGame.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MyGameEngine.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MoveIsInvalid.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularKnightsFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	FromCoordinateIsInvalid$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameInterruptionToMoveResult.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsDiagonalUpBottomColorValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsDiagonalValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceColorIsExpectedValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsDiagonalValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MoveToMovement.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneDiagonalUpValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBoard$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsStraightValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsTwoStraightUpValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PostMovementValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	DefaultPreMovementValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	AroundToCoordinateValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBoardFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsStraightDownTopColorValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBoardMovementValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	DiagonalIsEmptyValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	CannotPlayPieceFromDifferentColor$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightUpAndOneForwardIsEmptyWithYValueValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	OrOrCompositeValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneStraightRespectingColorValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MyPieceColorToPlayerColor.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneStraightDownValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBishopsFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	KingValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceColor.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Board.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MyPieceColorToPlayerColor$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PlayerCoordinate.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PreMovementValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnOneStraightMovementValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Movement.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Player$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameAction.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	NewGameStateGenerator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	DiagonalOrStraightIsEmptyValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsDiagonalUpBottomColorValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	FromCoordinateIsInvalid.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	KingValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsNotEmptyValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPiecePositionIsDifferentColorValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsDiagonalDownTopColorValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularPawnsFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	BishopValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameInterruptionToMoveResult$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	NoPieceInFromCoordinate$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	YValueFromCoordinateIsExpectedValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	YcoordPawnsFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	YValueFromCoordinateIsExpectedValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneUpIsEmptyValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBoardFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MyCoordinateToPosition$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightUpAndOneForwardIsEmptyWithYValueValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneDiagonalRespectingColorValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	AndCompositeValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	CheckValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	InitialStateFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Coordinate$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	AroundToCoordinateValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	QueenValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	BishopValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsTwoStraightDownValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsDiagonalDownTopColorValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsEmptyValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceType$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Piece$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	InitialStateFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceColor$$anon$1.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Turn$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	StraightlIsEmptyValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MiPiecesToChessPiece$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsStraightValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnOneStraightMovementValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularSingleColorRooksFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceColorIsExpectedValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Player.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsEmptyValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	DiagonalOrStraightIsEmptyValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneStraightDownValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MyCoordinateToPosition.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularKingsFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightDownAndOneForwardIsEmptyValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MoveIsInvalid$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsEmptyOrPieceIsDifferentColorValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MoveToMovement$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPiecePositionIsDifferentColorValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightUpAndOneForwardIsEmptyValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Main$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	KingWasEatenValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularGame$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RookValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightDownAndOneForwardIsEmptyWithYValueValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	DiagonalIsEmptyValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneDiagonalRespectingColorValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	BoardFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MyGameApplication.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	NewGameStateGenerator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnDiagonalMovementValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	KingWasEatenValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsStraightDownTopColorValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBoard.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightDownAndOneForwardIsEmptyWithYValueValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularSingleColorKinghtFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	StraightlIsEmptyValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsLShapedValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneStraightUpValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	NoPieceInFromCoordinate.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToCoordinateIsInvalid$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	KingWasEaten.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Turn.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RookValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularRooksFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	KingWasEaten$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnTwoStraightMovementValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneDiagonalDownValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneDownIsEmptyValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsStraightUpBottomColorValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Movement$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularSingleColorBishopFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnTwoStraightMovementValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	YcoordPawnsFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularSingleColorRooksFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	KnightValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceType.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	DefaultPreMovementValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularKnightsFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PlayerCoordinate$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightUpAndOneForwardIsEmptyValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceColor$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularRooksFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularSingleColorKinghtFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PlayerMovement.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsNotEmptyValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularQueensFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneDownIsEmptyValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Coordinate.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameInterruption.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0mRegistering generated classes:[0m
[0m[[0m[0mdebug[0m] [0m[0m	OrCompositeValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsTwoStraightUpValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsLShapedValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Piece.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	YValueFromCoordinateIsNotExpected.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionPieceIsSameColor$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsNotDiagonal$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PlayerMovement$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularKingsFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	CannotPlayPieceFromDifferentColor.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBishopsFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularQueensFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsEmptyOrPieceIsDifferentColorValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneDiagonalDownValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneDiagonalUpValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MiPiecesToChessPiece.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameData$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneUpIsEmptyValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	BoardPieceMapFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsStraightUpBottomColorValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Main.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameEnd.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	AndValidationNotMet$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	CheckValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnDiagonalMovementValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	KnightValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneStraightRespectingColorValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceColorIsNotExpected.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Game.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularSingleColorBishopFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	YValueFromCoordinateIsNotExpected$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightDownAndOneForwardIsEmptyValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneStraightUpValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToDifferentFrom.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PathIsNotEmpty.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularPawnsFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	OrOrValidationNotMet$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsTwoStraightDownValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	QueenValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	IsNotTwoStraightUp.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToCoordinateIsInvalid.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBoardMovementValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameData.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceType$$anon$1.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	IsNotOneStraightDown.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularGame.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MyGameEngine.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsNotEmpty.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsNotStraight$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	LineEmptyPositionsFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	LineEmptyPositionsFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularKnightsFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	FromCoordinateIsInvalid$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameInterruptionToMoveResult.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsDiagonalUpBottomColorValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsDiagonalValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceColorIsExpectedValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsDiagonalValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MoveToMovement.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneDiagonalUpValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBoard$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsStraightValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsTwoStraightUpValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PostMovementValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	DefaultPreMovementValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBoardFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	NotLShaped.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsStraightDownTopColorValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBoardMovementValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	DiagonalIsEmptyValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	CannotPlayPieceFromDifferentColor$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightUpAndOneForwardIsEmptyWithYValueValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	IsNotOneDiagonalUp.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	OrValidationNotMet$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	OrOrCompositeValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneStraightRespectingColorValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MyPieceColorToPlayerColor.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneStraightDownValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBishopsFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	KingValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceColor.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	EmptyPositionsFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Board.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MyPieceColorToPlayerColor$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PlayerCoordinate.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PreMovementValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnOneStraightMovementValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionPieceIsSameColor.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Movement.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Player$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameAction.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	NewGameStateGenerator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	DiagonalOrStraightIsEmptyValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsDiagonalUpBottomColorValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	FromCoordinateIsInvalid.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	AndValidationNotMet.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	KingValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsNotEmptyValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPiecePositionIsDifferentColorValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsDiagonalDownTopColorValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularPawnsFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	BishopValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameInterruptionToMoveResult$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	NoPieceInFromCoordinate$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	YValueFromCoordinateIsExpectedValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	YcoordPawnsFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	YValueFromCoordinateIsExpectedValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneUpIsEmptyValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBoardFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	IsNotTwoStraightDown$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MyCoordinateToPosition$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	EmptyPositionsFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightUpAndOneForwardIsEmptyWithYValueValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneDiagonalRespectingColorValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	AndCompositeValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	CheckValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	IdGenerator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	InitialStateFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	OrValidationNotMet.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Coordinate$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	IsNotTwoStraightUp$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	QueenValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	BishopValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsTwoStraightDownValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsNotStraight.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsDiagonalDownTopColorValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsEmptyValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceType$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Piece$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	InitialStateFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceColor$$anon$1.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Turn$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	StraightlIsEmptyValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MiPiecesToChessPiece$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsStraightValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnOneStraightMovementValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularSingleColorRooksFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	IsNotOneStraightDown$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	IsNotOneDiagonalUp$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceColorIsExpectedValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Player.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsEmptyValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	DiagonalOrStraightIsEmptyValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneStraightDownValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MyCoordinateToPosition.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularKingsFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightDownAndOneForwardIsEmptyValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsEmptyOrPieceIsDifferentColorValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MoveToMovement$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToDifferentFrom$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPiecePositionIsDifferentColorValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	IsNotOneStraightUp$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsNotEmpty$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightUpAndOneForwardIsEmptyValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Main$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	KingWasEatenValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularGame$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsEmpty$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	IsNotOneStraightUp.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RookValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	IsNotOneDiagonalDown$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightDownAndOneForwardIsEmptyWithYValueValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	DiagonalIsEmptyValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneDiagonalRespectingColorValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsNotDiagonal.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	BoardFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MyGameApplication.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	NewGameStateGenerator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnDiagonalMovementValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	KingWasEatenValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsStraightDownTopColorValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBoard.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightDownAndOneForwardIsEmptyWithYValueValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularSingleColorKinghtFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	StraightlIsEmptyValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsLShapedValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneStraightUpValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	NoPieceInFromCoordinate.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceColorIsNotExpected$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PathIsNotEmpty$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToCoordinateIsInvalid$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	KingWasEaten.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Turn.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	OrOrValidationNotMet.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RookValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsEmpty.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularRooksFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	KingWasEaten$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnTwoStraightMovementValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneDiagonalDownValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneDownIsEmptyValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsStraightUpBottomColorValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Movement$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	IsNotOneDiagonalDown.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularSingleColorBishopFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnTwoStraightMovementValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	YcoordPawnsFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularSingleColorRooksFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	NotLShaped$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	KnightValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceType.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	IdGenerator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	DefaultPreMovementValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularKnightsFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PlayerCoordinate$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightUpAndOneForwardIsEmptyValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceColor$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularRooksFactory$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnValidator.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularSingleColorKinghtFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	PlayerMovement.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	IsNotTwoStraightDown.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsNotEmptyValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularQueensFactory.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneDownIsEmptyValidator$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Coordinate.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameInterruption.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	OrCompositeValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsTwoStraightUpValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsLShapedValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Piece.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	YValueFromCoordinateIsNotExpected.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionPieceIsSameColor$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsNotDiagonal$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PlayerMovement$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularKingsFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	CannotPlayPieceFromDifferentColor.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBishopsFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularQueensFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsEmptyOrPieceIsDifferentColorValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneDiagonalDownValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneDiagonalUpValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MiPiecesToChessPiece.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameData$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneUpIsEmptyValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	BoardPieceMapFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsStraightUpBottomColorValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Main.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameEnd.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	AndValidationNotMet$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	CheckValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnDiagonalMovementValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	KnightValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneStraightRespectingColorValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceColorIsNotExpected.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Game.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularSingleColorBishopFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	YValueFromCoordinateIsNotExpected$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightDownAndOneForwardIsEmptyValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneStraightUpValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToDifferentFrom.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PathIsNotEmpty.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularPawnsFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	OrOrValidationNotMet$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsTwoStraightDownValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	QueenValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	IsNotTwoStraightUp.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToCoordinateIsInvalid.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBoardMovementValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameData.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceType$$anon$1.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	IsNotOneStraightDown.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularGame.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MyGameEngine.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsNotEmpty.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsNotStraight$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	LineEmptyPositionsFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	LineEmptyPositionsFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularKnightsFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	FromCoordinateIsInvalid$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameInterruptionToMoveResult.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsDiagonalUpBottomColorValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsDiagonalValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceColorIsExpectedValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsDiagonalValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MoveToMovement.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneDiagonalUpValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBoard$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsStraightValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsTwoStraightUpValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PostMovementValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	DefaultPreMovementValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBoardFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	NotLShaped.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsStraightDownTopColorValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBoardMovementValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	DiagonalIsEmptyValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	CannotPlayPieceFromDifferentColor$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightUpAndOneForwardIsEmptyWithYValueValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	IsNotOneDiagonalUp.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	OrValidationNotMet$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	OrOrCompositeValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneStraightRespectingColorValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MyPieceColorToPlayerColor.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneStraightDownValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBishopsFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	KingValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceColor.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	EmptyPositionsFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Board.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MyPieceColorToPlayerColor$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PlayerCoordinate.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PreMovementValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnOneStraightMovementValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionPieceIsSameColor.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Movement.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Player$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameAction.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	NewGameStateGenerator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	DiagonalOrStraightIsEmptyValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsDiagonalUpBottomColorValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	FromCoordinateIsInvalid.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	AndValidationNotMet.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	KingValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsNotEmptyValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPiecePositionIsDifferentColorValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsDiagonalDownTopColorValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularPawnsFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	BishopValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameInterruptionToMoveResult$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	NoPieceInFromCoordinate$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	YValueFromCoordinateIsExpectedValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	YcoordPawnsFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	YValueFromCoordinateIsExpectedValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneUpIsEmptyValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBoardFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	IsNotTwoStraightDown$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MyCoordinateToPosition$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	EmptyPositionsFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightUpAndOneForwardIsEmptyWithYValueValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneDiagonalRespectingColorValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	AndCompositeValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	CheckValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	IdGenerator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	InitialStateFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	OrValidationNotMet.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Coordinate$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	IsNotTwoStraightUp$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	QueenValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	BishopValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsTwoStraightDownValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsNotStraight.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsDiagonalDownTopColorValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsEmptyValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceType$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Piece$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	InitialStateFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceColor$$anon$1.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Turn$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	StraightlIsEmptyValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MiPiecesToChessPiece$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsStraightValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnOneStraightMovementValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularSingleColorRooksFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	IsNotOneStraightDown$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	IsNotOneDiagonalUp$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceColorIsExpectedValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Player.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsEmptyValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	DiagonalOrStraightIsEmptyValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneStraightDownValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MyCoordinateToPosition.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularKingsFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightDownAndOneForwardIsEmptyValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsEmptyOrPieceIsDifferentColorValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MoveToMovement$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToDifferentFrom$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPiecePositionIsDifferentColorValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	IsNotOneStraightUp$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsNotEmpty$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightUpAndOneForwardIsEmptyValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Main$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	KingWasEatenValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularGame$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsEmpty$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	IsNotOneStraightUp.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RookValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	IsNotOneDiagonalDown$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightDownAndOneForwardIsEmptyWithYValueValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	DiagonalIsEmptyValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneDiagonalRespectingColorValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsNotDiagonal.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	BoardFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MyGameApplication.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	NewGameStateGenerator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnDiagonalMovementValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	KingWasEatenValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsStraightDownTopColorValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularBoard.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightDownAndOneForwardIsEmptyWithYValueValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularSingleColorKinghtFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	StraightlIsEmptyValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsLShapedValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneStraightUpValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	NoPieceInFromCoordinate.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceColorIsNotExpected$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PathIsNotEmpty$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToCoordinateIsInvalid$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	KingWasEaten.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Turn.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	OrOrValidationNotMet.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RookValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsEmpty.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularRooksFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	KingWasEaten$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnTwoStraightMovementValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsOneDiagonalDownValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneDownIsEmptyValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	MovementIsStraightUpBottomColorValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Movement$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	IsNotOneDiagonalDown.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularSingleColorBishopFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnTwoStraightMovementValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	YcoordPawnsFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularSingleColorRooksFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	NotLShaped$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	KnightValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceType.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	IdGenerator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	DefaultPreMovementValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularKnightsFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PlayerCoordinate$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	TwoStraightUpAndOneForwardIsEmptyValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PieceColor$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularRooksFactory$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PawnValidator.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularSingleColorKinghtFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	PlayerMovement.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	IsNotTwoStraightDown.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ToPositionIsNotEmptyValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	RegularQueensFactory.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	OneDownIsEmptyValidator$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Coordinate.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	GameInterruption.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0mRemoving the temporary directory used for backing up class files: /home/indigo/proyects/dis_chess/code/target/scala-3.2.0/classes.bak[0m
