[0m[[0m[0mdebug[0m] [0m[0m[zinc] IncrementalCompile -----------[0m
[0m[[0m[0mdebug[0m] [0m[0mIncrementalCompile.incrementalCompile[0m
[0m[[0m[0mdebug[0m] [0m[0mprevious = Stamps for: 152 products, 81 sources, 4 libraries[0m
[0m[[0m[0mdebug[0m] [0m[0mcurrent source = Set(${BASE}/src/main/scala/game_action/movement_validation/generic/ToPositionIsEmptyValidator.scala, ${BASE}/src/main/scala/game_action/movement_validation/generic/movement/MovementIsDiagonalValidator.scala, ${BASE}/src/main/scala/game_action/movement_validation/generic/check/CheckValidator.scala, ${BASE}/src/main/scala/game_action/post_movement_validation/PostMovementValidator.scala, ${BASE}/src/main/scala/game_action/movement_validation/generic/movement/MovementIsTwoStraightUpValidator.scala, ${BASE}/src/main/scala/game_interruption/post_movement_validation/GameEnd.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/RegularPawnsFactory.scala, ${BASE}/src/main/scala/game_integration/MiPiecesToChessPiece.scala, ${BASE}/src/main/scala/game_action/movement_validation/generic/movement/MovementIsStraightValidator.scala, ${BASE}/src/main/scala/game_action/movement_validation/generic/path/DiagonalOrStraightIsEmptyValidator.scala, ${BASE}/src/main/scala/game_action/movement_validation/piece/BishopValidator.scala, ${BASE}/src/main/scala/game_interruption/GameInterruption.scala, ${BASE}/src/main/scala/game_action/movement_validation/generic/movement/MovementIsOneDiagonalDownValidator.scala, ${BASE}/src/main/scala/game_action/movement_validation/generic/movement/AroundToCoordinateValidator.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/RegularRooksFactory.scala, ${BASE}/src/main/scala/game_action/movement_validation/generic/OrOrCompositeValidator.scala, ${BASE}/src/main/scala/game_data/board/RegularBoard.scala, ${BASE}/src/main/scala/factory/board/RegularBoardFactory.scala, ${BASE}/src/main/scala/game_interruption/pre_movement_validation/NoPieceInFromCoordinate.scala, ${BASE}/src/main/scala/player/PlayerCoordinate.scala, ${BASE}/src/main/scala/game_interruption/movement_validation/MoveIsInvalid.scala, ${BASE}/src/main/scala/game_data/board/Board.scala, ${BASE}/src/main/scala/game_integration/MoveToMovement.scala, ${BASE}/src/main/scala/app/MyGameApplication.scala, ${BASE}/src/main/scala/game_action/movement_validation/generic/path/StraightlIsEmptyValidator.scala, ${BASE}/src/main/scala/game_interruption/pre_movement_validation/ToCoordinateIsInvalid.scala, ${BASE}/src/main/scala/game_action/movement_validation/generic/movement/TwoStraightDownAndOneForwardIsEmptyWithYValueValidator.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/RegularKnightsFactory.scala, ${BASE}/src/main/scala/main.scala, ${BASE}/src/main/scala/game_data/turn/Turn.scala, ${BASE}/src/main/scala/game/RegularGame.scala, ${BASE}/src/main/scala/game_action/movement_validation/generic/movement/MovementIsOneStraightUpValidator.scala, ${BASE}/src/main/scala/game_data/board/Coordinate.scala, ${BASE}/src/main/scala/game_action/movement_validation/generic/movement/OneDiagonalRespectingColorValidator.scala, ${BASE}/src/main/scala/game_action/movement_validation/piece/RookValidator.scala, ${BASE}/src/main/scala/game/Game.scala, ${BASE}/src/main/scala/game_integration/MyCoordinateToPosition.scala, ${BASE}/src/main/scala/game_action/movement_validation/piece/pawn/PawnOneStraightMovementValidator.scala, ${BASE}/src/main/scala/factory/board/BoardFactory.scala, ${BASE}/src/main/scala/game_data/piece/PieceColor.scala, ${BASE}/src/main/scala/game_interruption/pre_movement_validation/FromCoordinateIsInvalid.scala, ${BASE}/src/main/scala/game_action/movement_validation/generic/ToPiecePositionIsDifferentColorValidator.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/RegularSingleColorBishopFactory.scala, ${BASE}/src/main/scala/game_action/movement_validation/generic/movement/MovementIsDiagonalDownTopColorValidator.scala, ${BASE}/src/main/scala/game_action/movement_validation/generic/ToPositionIsNotEmptyValidator.scala, ${BASE}/src/main/scala/player/Player.scala, ${BASE}/src/main/scala/game_action/movement_validation/piece/PawnValidator.scala, ${BASE}/src/main/scala/game_action/movement_validation/generic/path/DiagonalIsEmptyValidator.scala, ${BASE}/src/main/scala/game_action/movement_validation/generic/path/OneUpIsEmptyValidator.scala, ${BASE}/src/main/scala/game_action/movement_validation/generic/movement/TwoStraightUpAndOneForwardIsEmptyWithYValueValidator.scala, ${BASE}/src/main/scala/game_action/movement_validation/generic/movement/MovementIsTwoStraightDownValidator.scala, ${BASE}/src/main/scala/game_action/movement_validation/piece/KingValidator.scala, ${BASE}/src/main/scala/game_action/movement_validation/generic/from_coordinate_condition/YValueFromCoordinateIsExpectedValidator.scala, ${BASE}/src/main/scala/game_data/GameData.scala, ${BASE}/src/main/scala/game_integration/NewGameStateGenerator.scala, ${BASE}/src/main/scala/game_action/movement_validation/piece/KnightValidator.scala, ${BASE}/src/main/scala/game_action/movement_validation/MovementValidator.scala, ${BASE}/src/main/scala/game_action/pre_movement_validation/DefaultPreMovementValidator.scala, ${BASE}/src/main/scala/game_action/pre_movement_validation/PreMovementValidator.scala, ${BASE}/src/main/scala/game_action/movement_validation/generic/movement/MovementIsOneStraightDownValidator.scala, ${BASE}/src/main/scala/game_action/movement_validation/generic/movement/MovementIsDiagonalUpBottomColorValidator.scala, ${BASE}/src/main/scala/game_action/movement_validation/generic/movement/MovementIsStraightUpBottomColorValidator.scala, ${BASE}/src/main/scala/game_interruption/pre_movement_validation/CannotPlayPieceFromDifferentColor.scala, ${BASE}/src/main/scala/game_integration/GameInterruptionToMoveResult.scala, ${BASE}/src/main/scala/game_data/movement/Movement.scala, ${BASE}/src/main/scala/game_action/movement_validation/generic/movement/TwoStraightDownAndOneForwardIsEmptyValidator.scala, ${BASE}/src/main/scala/game_action/post_movement_validation/KingWasEatenValidator.scala, ${BASE}/src/main/scala/game_action/GameAction.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/YcoordPawnsFactory.scala, ${BASE}/src/main/scala/game_action/movement_validation/piece/QueenValidator.scala, ${BASE}/src/main/scala/game_engine/MyGameEngine.scala, ${BASE}/src/main/scala/game_interruption/post_movement_validation/KingWasEaten.scala, ${BASE}/src/main/scala/game_data/piece/PieceType.scala, ${BASE}/src/main/scala/game_action/movement_validation/generic/movement/MovementIsOneDiagonalUpValidator.scala, ${BASE}/src/main/scala/game_action/movement_validation/generic/movement/OneStraightRespectingColorValidator.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/BoardPieceMapFactory.scala, ${BASE}/src/main/scala/game_action/movement_validation/piece/pawn/PawnDiagonalMovementValidator.scala, ${BASE}/src/main/scala/game_integration/MyPieceColorToPlayerColor.scala, ${BASE}/src/main/scala/game_action/movement_validation/generic/AndCompositeValidator.scala, ${BASE}/src/main/scala/game_action/movement_validation/generic/ToPositionIsEmptyOrPieceIsDifferentColorValidator.scala, ${BASE}/src/main/scala/game_action/movement_validation/generic/movement/MovementIsStraightDownTopColorValidator.scala, ${BASE}/src/main/scala/game_action/movement_validation/exposed/RegularBoardMovementValidator.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/RegularQueensFactory.scala, ${BASE}/src/main/scala/player/PlayerMovement.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/RegularSingleColorRooksFactory.scala, ${BASE}/src/main/scala/game_action/movement_validation/generic/movement/MovementIsLShapedValidator.scala, ${BASE}/src/main/scala/game_data/piece/Piece.scala, ${BASE}/src/main/scala/game_action/movement_validation/generic/path/OneDownIsEmptyValidator.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/RegularSingleColorKinghtFactory.scala, ${BASE}/src/main/scala/game_action/movement_validation/generic/movement/TwoStraightUpAndOneForwardIsEmptyValidator.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/RegularBishopsFactory.scala, ${BASE}/src/main/scala/game_integration/InitialStateFactory.scala, ${BASE}/src/main/scala/game_action/movement_validation/generic/color/PieceColorIsExpectedValidator.scala, ${BASE}/src/main/scala/game_action/movement_validation/piece/pawn/PawnTwoStraightMovementValidator.scala, ${BASE}/src/main/scala/game_action/movement_validation/generic/OrCompositeValidator.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/RegularKingsFactory.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m> initialChanges = InitialChanges(Changes(added = Set(${BASE}/src/main/scala/factory/board/board_piece_map/RegularPawnsFactory.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/RegularQueensFactory.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/RegularKnightsFactory.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/RegularSingleColorKinghtFactory.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/BoardPieceMapFactory.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/RegularRooksFactory.scala, ${BASE}/src/main/scala/factory/board/BoardFactory.scala, ${BASE}/src/main/scala/app/MyGameApplication.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/RegularKingsFactory.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/RegularBishopsFactory.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/RegularSingleColorBishopFactory.scala, ${BASE}/src/main/scala/game_data/board/RegularBoard.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/YcoordPawnsFactory.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/RegularSingleColorRooksFactory.scala, ${BASE}/src/main/scala/factory/board/RegularBoardFactory.scala), removed = Set(), changed = Set(${BASE}/src/main/scala/main.scala, ${BASE}/src/main/scala/game/RegularGame.scala), unmodified = ...),Set(${BASE}/target/scala-3.2.0/classes/Main.class, ${BASE}/target/scala-3.2.0/classes/game/RegularGame.class, ${BASE}/target/scala-3.2.0/classes/game_engine/MyGameEngine.class, ${BASE}/target/scala-3.2.0/classes/Main$.class, ${BASE}/target/scala-3.2.0/classes/game_action/post_movement_validation/KingWasEatenValidator.class, ${BASE}/target/scala-3.2.0/classes/game/RegularGame$.class, ${BASE}/target/scala-3.2.0/classes/game_data/turn/Turn.class),Set(),API Changes: Set())[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial source changes:[0m
[0m[[0m[0mdebug[0m] [0m[0m	removed: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	added: Set(${BASE}/src/main/scala/factory/board/board_piece_map/RegularPawnsFactory.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/RegularRooksFactory.scala, ${BASE}/src/main/scala/game_data/board/RegularBoard.scala, ${BASE}/src/main/scala/factory/board/RegularBoardFactory.scala, ${BASE}/src/main/scala/app/MyGameApplication.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/RegularKnightsFactory.scala, ${BASE}/src/main/scala/factory/board/BoardFactory.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/RegularSingleColorBishopFactory.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/YcoordPawnsFactory.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/BoardPieceMapFactory.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/RegularQueensFactory.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/RegularSingleColorRooksFactory.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/RegularSingleColorKinghtFactory.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/RegularBishopsFactory.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/RegularKingsFactory.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	modified: Set(${BASE}/src/main/scala/main.scala, ${BASE}/src/main/scala/game/RegularGame.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated products: Set(${BASE}/target/scala-3.2.0/classes/Main.class, ${BASE}/target/scala-3.2.0/classes/game/RegularGame.class, ${BASE}/target/scala-3.2.0/classes/game_engine/MyGameEngine.class, ${BASE}/target/scala-3.2.0/classes/Main$.class, ${BASE}/target/scala-3.2.0/classes/game_action/post_movement_validation/KingWasEatenValidator.class, ${BASE}/target/scala-3.2.0/classes/game/RegularGame$.class, ${BASE}/target/scala-3.2.0/classes/game_data/turn/Turn.class)[0m
[0m[[0m[0mdebug[0m] [0m[0mExternal API changes: API Changes: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mModified binary dependencies: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial directly invalidated classes: Set(Main, game.RegularGame)[0m
[0m[[0m[0mdebug[0m] [0m[0mSources indirectly invalidated by:[0m
[0m[[0m[0mdebug[0m] [0m[0m	product: Set(${BASE}/src/main/scala/main.scala, ${BASE}/src/main/scala/game_data/turn/Turn.scala, ${BASE}/src/main/scala/game/RegularGame.scala, ${BASE}/src/main/scala/game_action/post_movement_validation/KingWasEatenValidator.scala, ${BASE}/src/main/scala/game_engine/MyGameEngine.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	binary dep: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	external source: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated classes: Set(Main, game.RegularGame)[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated sources:Set(${BASE}/src/main/scala/factory/board/board_piece_map/RegularPawnsFactory.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/RegularRooksFactory.scala, ${BASE}/src/main/scala/game_data/board/RegularBoard.scala, ${BASE}/src/main/scala/factory/board/RegularBoardFactory.scala, ${BASE}/src/main/scala/app/MyGameApplication.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/RegularKnightsFactory.scala, ${BASE}/src/main/scala/main.scala, ${BASE}/src/main/scala/game_data/turn/Turn.scala, ${BASE}/src/main/scala/game/RegularGame.scala, ${BASE}/src/main/scala/factory/board/BoardFactory.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/RegularSingleColorBishopFactory.scala, ${BASE}/src/main/scala/game_action/post_movement_validation/KingWasEatenValidator.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/YcoordPawnsFactory.scala, ${BASE}/src/main/scala/game_engine/MyGameEngine.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/BoardPieceMapFactory.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/RegularQueensFactory.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/RegularSingleColorRooksFactory.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/RegularSingleColorKinghtFactory.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/RegularBishopsFactory.scala, ${BASE}/src/main/scala/factory/board/board_piece_map/RegularKingsFactory.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Main, game.RegularGame[0m
[0m[[0m[0mdebug[0m] [0m[0mcompilation cycle 1[0m
[0m[[0m[0minfo[0m] [0m[0mcompiling 20 Scala sources to /home/indigo/proyects/dis_chess/code/target/scala-3.2.0/classes ...[0m
[0m[[0m[0mdebug[0m] [0m[0mReturning already retrieved and compiled bridge: /home/indigo/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala3-sbt-bridge/3.2.0/scala3-sbt-bridge-3.2.0.jar.[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] Running cached compiler ad8d1bc for Scala Compiler version 3.2.0[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] The Scala compiler is invoked with:[0m
[0m[[0m[0mdebug[0m] [0m[0m	-bootclasspath[0m
[0m[[0m[0mdebug[0m] [0m[0m	/home/indigo/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala3-library_3/3.2.0/scala3-library_3-3.2.0.jar:/home/indigo/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-library/2.13.8/scala-library-2.13.8.jar[0m
[0m[[0m[0mdebug[0m] [0m[0m	-classpath[0m
[0m[[0m[0mdebug[0m] [0m[0m	/home/indigo/proyects/dis_chess/code/target/scala-3.2.0/classes:/home/indigo/.cache/coursier/v1/https/maven.pkg.github.com/austral-ingsis/chess-ui/edu/austral/dissis/chess/chess-ui/1.0.0/chess-ui-1.0.0.jar:/home/indigo/.cache/coursier/v1/https/repo1.maven.org/maven2/org/jetbrains/kotlin/kotlin-stdlib-jdk8/1.7.10/kotlin-stdlib-jdk8-1.7.10.jar:/home/indigo/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-base/18/javafx-base-18-mac.jar:/home/indigo/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-graphics/18/javafx-graphics-18-mac.jar:/home/indigo/.cache/coursier/v1/https/repo1.maven.org/maven2/org/jetbrains/kotlin/kotlin-script-runtime/1.7.10/kotlin-script-runtime-1.7.10.jar:/home/indigo/.cache/coursier/v1/https/repo1.maven.org/maven2/org/jetbrains/kotlin/kotlin-stdlib/1.7.10/kotlin-stdlib-1.7.10.jar:/home/indigo/.cache/coursier/v1/https/repo1.maven.org/maven2/org/jetbrains/kotlin/kotlin-stdlib-jdk7/1.7.10/kotlin-stdlib-jdk7-1.7.10.jar:/home/indigo/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-base/18/javafx-base-18-linux.jar:/home/indigo/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-graphics/18/javafx-graphics-18-linux.jar:/home/indigo/.cache/coursier/v1/https/repo1.maven.org/maven2/org/openjfx/javafx-base/18/javafx-base-18.jar:/home/indigo/.cache/coursier/v1/https/repo1.maven.org/maven2/org/jetbrains/kotlin/kotlin-stdlib-common/1.7.10/kotlin-stdlib-common-1.7.10.jar:/home/indigo/.cache/coursier/v1/https/repo1.maven.org/maven2/org/jetbrains/annotations/13.0/annotations-13.0.jar[0m
[0m[[0m[0mdebug[0m] [0m[0mScala compilation took 4.45108008 s[0m
[0m[[0m[0mdebug[0m] [0m[0mdone compiling[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from factory.board.board_piece_map.RegularQueensFactory...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: factory.board.board_piece_map.RegularQueensFactory[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(factory.board.board_piece_map.RegularQueensFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of factory.board.RegularBoardFactory: [UsedName(createPieces,[Default]), UsedName(apply,[Default]), UsedName(RegularQueensFactory,[Default])][0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(factory.board.board_piece_map.RegularQueensFactory,ModifiedNames(changes = UsedName(##,[Default]), UsedName(MirroredLabel,[Default]), UsedName(Product;init;,[Default]), UsedName(productElementName,[Default]), UsedName(getClass,[Default]), UsedName(ne,[Default]), UsedName(Mirror;init;,[Default]), UsedName(RegularQueensFactory;init;$,[Default]), UsedName(apply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(unapply,[Default]), UsedName(productElement,[Default]), UsedName(RegularQueensFactory;init;,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(Object;init;,[Default]), UsedName(productArity,[Default]), UsedName(Serializable;init;,[Default]), UsedName(toString,[Default]), UsedName(productPrefix,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(fromProduct,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(copy,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(BoardPieceMapFactory;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(MirroredMonoType,[Default]), UsedName(MirroredElemLabels,[Default]), UsedName(RegularQueensFactory,[Default]), UsedName(createPieces,[Default]))) invalidates 2 classes due to The factory.board.board_piece_map.RegularQueensFactory has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(##,[Default]), UsedName(MirroredLabel,[Default]), UsedName(Product;init;,[Default]), UsedName(productElementName,[Default]), UsedName(getClass,[Default]), UsedName(ne,[Default]), UsedName(Mirror;init;,[Default]), UsedName(RegularQueensFactory;init;$,[Default]), UsedName(apply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(unapply,[Default]), UsedName(productElement,[Default]), UsedName(RegularQueensFactory;init;,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(Object;init;,[Default]), UsedName(productArity,[Default]), UsedName(Serializable;init;,[Default]), UsedName(toString,[Default]), UsedName(productPrefix,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(fromProduct,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(copy,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(BoardPieceMapFactory;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(MirroredMonoType,[Default]), UsedName(MirroredElemLabels,[Default]), UsedName(RegularQueensFactory,[Default]), UsedName(createPieces,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m  > by transitive inheritance: Set(factory.board.board_piece_map.RegularQueensFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0m  > [0m
[0m[[0m[0mdebug[0m] [0m[0m  > by member reference: Set(factory.board.RegularBoardFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from factory.board.board_piece_map.RegularKingsFactory...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: factory.board.board_piece_map.RegularKingsFactory[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(factory.board.board_piece_map.RegularKingsFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of factory.board.RegularBoardFactory: [UsedName(createPieces,[Default]), UsedName(apply,[Default]), UsedName(RegularKingsFactory,[Default])][0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(factory.board.board_piece_map.RegularKingsFactory,ModifiedNames(changes = UsedName(RegularKingsFactory,[Default]), UsedName(##,[Default]), UsedName(MirroredLabel,[Default]), UsedName(Product;init;,[Default]), UsedName(productElementName,[Default]), UsedName(getClass,[Default]), UsedName(ne,[Default]), UsedName(Mirror;init;,[Default]), UsedName(apply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(unapply,[Default]), UsedName(productElement,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(Object;init;,[Default]), UsedName(productArity,[Default]), UsedName(Serializable;init;,[Default]), UsedName(toString,[Default]), UsedName(RegularKingsFactory;init;$,[Default]), UsedName(productPrefix,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(fromProduct,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(copy,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(BoardPieceMapFactory;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(wait,[Default]), UsedName(RegularKingsFactory;init;,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(MirroredMonoType,[Default]), UsedName(MirroredElemLabels,[Default]), UsedName(createPieces,[Default]))) invalidates 2 classes due to The factory.board.board_piece_map.RegularKingsFactory has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(RegularKingsFactory,[Default]), UsedName(##,[Default]), UsedName(MirroredLabel,[Default]), UsedName(Product;init;,[Default]), UsedName(productElementName,[Default]), UsedName(getClass,[Default]), UsedName(ne,[Default]), UsedName(Mirror;init;,[Default]), UsedName(apply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(unapply,[Default]), UsedName(productElement,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(Object;init;,[Default]), UsedName(productArity,[Default]), UsedName(Serializable;init;,[Default]), UsedName(toString,[Default]), UsedName(RegularKingsFactory;init;$,[Default]), UsedName(productPrefix,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(fromProduct,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(copy,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(BoardPieceMapFactory;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(wait,[Default]), UsedName(RegularKingsFactory;init;,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(MirroredMonoType,[Default]), UsedName(MirroredElemLabels,[Default]), UsedName(createPieces,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m  > by transitive inheritance: Set(factory.board.board_piece_map.RegularKingsFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0m  > [0m
[0m[[0m[0mdebug[0m] [0m[0m  > by member reference: Set(factory.board.RegularBoardFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from factory.board.board_piece_map.BoardPieceMapFactory...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: factory.board.board_piece_map.BoardPieceMapFactory[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding factory.board.board_piece_map.RegularQueensFactory by factory.board.board_piece_map.BoardPieceMapFactory[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding factory.board.board_piece_map.RegularSingleColorKinghtFactory by factory.board.board_piece_map.BoardPieceMapFactory[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding factory.board.board_piece_map.RegularKingsFactory by factory.board.board_piece_map.BoardPieceMapFactory[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding factory.board.board_piece_map.RegularSingleColorBishopFactory by factory.board.board_piece_map.BoardPieceMapFactory[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding factory.board.board_piece_map.RegularRooksFactory by factory.board.board_piece_map.BoardPieceMapFactory[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding factory.board.board_piece_map.RegularSingleColorRooksFactory by factory.board.board_piece_map.BoardPieceMapFactory[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding factory.board.board_piece_map.RegularBishopsFactory by factory.board.board_piece_map.BoardPieceMapFactory[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding factory.board.board_piece_map.RegularKnightsFactory by factory.board.board_piece_map.BoardPieceMapFactory[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding factory.board.board_piece_map.RegularPawnsFactory by factory.board.board_piece_map.BoardPieceMapFactory[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(factory.board.board_piece_map.RegularQueensFactory, factory.board.board_piece_map.RegularSingleColorKinghtFactory, factory.board.board_piece_map.RegularKingsFactory, factory.board.board_piece_map.BoardPieceMapFactory, factory.board.board_piece_map.RegularSingleColorBishopFactory, factory.board.board_piece_map.RegularRooksFactory, factory.board.board_piece_map.RegularSingleColorRooksFactory, factory.board.board_piece_map.RegularBishopsFactory, factory.board.board_piece_map.RegularKnightsFactory, factory.board.board_piece_map.RegularPawnsFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of factory.board.RegularBoardFactory: [UsedName(createPieces,[Default])][0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of factory.board.board_piece_map.RegularKnightsFactory: [UsedName(createPieces,[Default]), UsedName(BoardPieceMapFactory,[Default])][0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of factory.board.RegularBoardFactory: [UsedName(createPieces,[Default])][0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of factory.board.board_piece_map.RegularQueensFactory: [UsedName(BoardPieceMapFactory,[Default])][0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of factory.board.board_piece_map.RegularSingleColorKinghtFactory: [UsedName(BoardPieceMapFactory,[Default])][0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of factory.board.board_piece_map.RegularKingsFactory: [UsedName(BoardPieceMapFactory,[Default])][0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of factory.board.board_piece_map.RegularSingleColorBishopFactory: [UsedName(BoardPieceMapFactory,[Default])][0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of factory.board.board_piece_map.RegularRooksFactory: [UsedName(createPieces,[Default]), UsedName(BoardPieceMapFactory,[Default])][0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of factory.board.board_piece_map.RegularSingleColorRooksFactory: [UsedName(BoardPieceMapFactory,[Default])][0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of factory.board.board_piece_map.RegularBishopsFactory: [UsedName(createPieces,[Default]), UsedName(BoardPieceMapFactory,[Default])][0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of factory.board.board_piece_map.RegularKnightsFactory: [UsedName(createPieces,[Default]), UsedName(BoardPieceMapFactory,[Default])][0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of factory.board.board_piece_map.RegularPawnsFactory: [UsedName(createPieces,[Default]), UsedName(BoardPieceMapFactory,[Default])][0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of factory.board.board_piece_map.RegularBishopsFactory: [UsedName(createPieces,[Default]), UsedName(BoardPieceMapFactory,[Default])][0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of factory.board.RegularBoardFactory: [UsedName(createPieces,[Default])][0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of factory.board.board_piece_map.RegularRooksFactory: [UsedName(createPieces,[Default]), UsedName(BoardPieceMapFactory,[Default])][0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of factory.board.RegularBoardFactory: [UsedName(createPieces,[Default])][0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of factory.board.RegularBoardFactory: [UsedName(createPieces,[Default])][0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of factory.board.RegularBoardFactory: [UsedName(createPieces,[Default])][0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(factory.board.board_piece_map.BoardPieceMapFactory,ModifiedNames(changes = UsedName(##,[Default]), UsedName(getClass,[Default]), UsedName(ne,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(Object;init;,[Default]), UsedName(toString,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(BoardPieceMapFactory;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(BoardPieceMapFactory,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(createPieces,[Default]))) invalidates 11 classes due to The factory.board.board_piece_map.BoardPieceMapFactory has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(##,[Default]), UsedName(getClass,[Default]), UsedName(ne,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(Object;init;,[Default]), UsedName(toString,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(BoardPieceMapFactory;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(BoardPieceMapFactory,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(createPieces,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m  > by transitive inheritance: Set(factory.board.board_piece_map.RegularQueensFactory, factory.board.board_piece_map.RegularSingleColorKinghtFactory, factory.board.board_piece_map.RegularKingsFactory, factory.board.board_piece_map.BoardPieceMapFactory, factory.board.board_piece_map.RegularSingleColorBishopFactory, factory.board.board_piece_map.RegularRooksFactory, factory.board.board_piece_map.RegularSingleColorRooksFactory, factory.board.board_piece_map.RegularBishopsFactory, factory.board.board_piece_map.RegularKnightsFactory, factory.board.board_piece_map.RegularPawnsFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0m  > [0m
[0m[[0m[0mdebug[0m] [0m[0m  > by member reference: Set(factory.board.board_piece_map.RegularQueensFactory, factory.board.board_piece_map.RegularSingleColorKinghtFactory, factory.board.board_piece_map.RegularKingsFactory, factory.board.board_piece_map.RegularSingleColorBishopFactory, factory.board.board_piece_map.RegularRooksFactory, factory.board.board_piece_map.RegularSingleColorRooksFactory, factory.board.RegularBoardFactory, factory.board.board_piece_map.RegularBishopsFactory, factory.board.board_piece_map.RegularKnightsFactory, factory.board.board_piece_map.RegularPawnsFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from app.MyGameApplication...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: app.MyGameApplication[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(app.MyGameApplication)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of Main: [UsedName(MyGameApplication,[Default])][0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(app.MyGameApplication,ModifiedNames(changes = UsedName(##,[Default]), UsedName(AbstractChessGameApplication;init;,[Default]), UsedName(getClass,[Default]), UsedName(ne,[Default]), UsedName(init,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(MyGameApplication,[Default]), UsedName(imageResolver,[Default]), UsedName(MyGameApplication;init;,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(Object;init;,[Default]), UsedName(toString,[Default]), UsedName(getHostServices,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(stop,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(getParameters,[Default]), UsedName(synchronized,[Default]), UsedName(start,[Default]), UsedName(notifyPreloader,[Default]), UsedName(isInstanceOf,[Default]), UsedName(gameEngine,[Default]), UsedName(notifyAll,[Default]), UsedName(Application;init;,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(getGameEngine,[Default]), UsedName(getImageResolver,[Default]))) invalidates 2 classes due to The app.MyGameApplication has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(##,[Default]), UsedName(AbstractChessGameApplication;init;,[Default]), UsedName(getClass,[Default]), UsedName(ne,[Default]), UsedName(init,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(MyGameApplication,[Default]), UsedName(imageResolver,[Default]), UsedName(MyGameApplication;init;,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(Object;init;,[Default]), UsedName(toString,[Default]), UsedName(getHostServices,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(stop,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(getParameters,[Default]), UsedName(synchronized,[Default]), UsedName(start,[Default]), UsedName(notifyPreloader,[Default]), UsedName(isInstanceOf,[Default]), UsedName(gameEngine,[Default]), UsedName(notifyAll,[Default]), UsedName(Application;init;,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(getGameEngine,[Default]), UsedName(getImageResolver,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m  > by transitive inheritance: Set(app.MyGameApplication)[0m
[0m[[0m[0mdebug[0m] [0m[0m  > [0m
[0m[[0m[0mdebug[0m] [0m[0m  > by member reference: Set(Main)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from factory.board.board_piece_map.RegularPawnsFactory...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: factory.board.board_piece_map.RegularPawnsFactory[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(factory.board.board_piece_map.RegularPawnsFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of factory.board.RegularBoardFactory: [UsedName(RegularPawnsFactory,[Default]), UsedName(createPieces,[Default]), UsedName(apply,[Default])][0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(factory.board.board_piece_map.RegularPawnsFactory,ModifiedNames(changes = UsedName(##,[Default]), UsedName(blackPawns,[Default]), UsedName(MirroredLabel,[Default]), UsedName(Product;init;,[Default]), UsedName(productElementName,[Default]), UsedName(getClass,[Default]), UsedName(ne,[Default]), UsedName(Mirror;init;,[Default]), UsedName(RegularPawnsFactory;init;,[Default]), UsedName(apply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(unapply,[Default]), UsedName(productElement,[Default]), UsedName(notify,[Default]), UsedName(RegularPawnsFactory;init;$,[Default]), UsedName(!=,[Default]), UsedName(Object;init;,[Default]), UsedName(productArity,[Default]), UsedName(Serializable;init;,[Default]), UsedName(RegularPawnsFactory,[Default]), UsedName(toString,[Default]), UsedName(whitePawns,[Default]), UsedName(productPrefix,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(fromProduct,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(copy,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(BoardPieceMapFactory;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(MirroredMonoType,[Default]), UsedName(MirroredElemLabels,[Default]), UsedName(createPieces,[Default]))) invalidates 2 classes due to The factory.board.board_piece_map.RegularPawnsFactory has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(##,[Default]), UsedName(blackPawns,[Default]), UsedName(MirroredLabel,[Default]), UsedName(Product;init;,[Default]), UsedName(productElementName,[Default]), UsedName(getClass,[Default]), UsedName(ne,[Default]), UsedName(Mirror;init;,[Default]), UsedName(RegularPawnsFactory;init;,[Default]), UsedName(apply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(unapply,[Default]), UsedName(productElement,[Default]), UsedName(notify,[Default]), UsedName(RegularPawnsFactory;init;$,[Default]), UsedName(!=,[Default]), UsedName(Object;init;,[Default]), UsedName(productArity,[Default]), UsedName(Serializable;init;,[Default]), UsedName(RegularPawnsFactory,[Default]), UsedName(toString,[Default]), UsedName(whitePawns,[Default]), UsedName(productPrefix,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(fromProduct,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(copy,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(BoardPieceMapFactory;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(MirroredMonoType,[Default]), UsedName(MirroredElemLabels,[Default]), UsedName(createPieces,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m  > by transitive inheritance: Set(factory.board.board_piece_map.RegularPawnsFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0m  > [0m
[0m[[0m[0mdebug[0m] [0m[0m  > by member reference: Set(factory.board.RegularBoardFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from game_data.board.RegularBoard...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: game_data.board.RegularBoard[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(game_data.board.RegularBoard)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of app.MyGameApplication: [UsedName(apply,[Default]), UsedName(RegularBoard,[Default])][0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of factory.board.RegularBoardFactory: [UsedName(apply,[Default]), UsedName(RegularBoard,[Default]), UsedName(pieces,[Default])][0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(game_data.board.RegularBoard,ModifiedNames(changes = UsedName(RegularBoard;init;,[Default]), UsedName(##,[Default]), UsedName(MirroredLabel,[Default]), UsedName(Product;init;,[Default]), UsedName(productElementName,[Default]), UsedName(getClass,[Default]), UsedName(ne,[Default]), UsedName(Mirror;init;,[Default]), UsedName(apply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(pieces,[Default]), UsedName(RegularBoard,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(unapply,[Default]), UsedName(getPieces,[Default]), UsedName(productElement,[Default]), UsedName(makeMovement,[Default]), UsedName(Board;init;,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(Object;init;,[Default]), UsedName(productArity,[Default]), UsedName(Serializable;init;,[Default]), UsedName(toString,[Default]), UsedName(productPrefix,[Default]), UsedName(RegularBoard;init;$,[Default]), UsedName(_1,[Default]), UsedName(equals,[Default]), UsedName(getPiece,[Default]), UsedName(finalize,[Default]), UsedName(fromProduct,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(copy,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(MirroredMonoType,[Default]), UsedName(coordinateBelongs,[Default]), UsedName(MirroredElemLabels,[Default]))) invalidates 3 classes due to The game_data.board.RegularBoard has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(RegularBoard;init;,[Default]), UsedName(##,[Default]), UsedName(MirroredLabel,[Default]), UsedName(Product;init;,[Default]), UsedName(productElementName,[Default]), UsedName(getClass,[Default]), UsedName(ne,[Default]), UsedName(Mirror;init;,[Default]), UsedName(apply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(pieces,[Default]), UsedName(RegularBoard,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(unapply,[Default]), UsedName(getPieces,[Default]), UsedName(productElement,[Default]), UsedName(makeMovement,[Default]), UsedName(Board;init;,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(Object;init;,[Default]), UsedName(productArity,[Default]), UsedName(Serializable;init;,[Default]), UsedName(toString,[Default]), UsedName(productPrefix,[Default]), UsedName(RegularBoard;init;$,[Default]), UsedName(_1,[Default]), UsedName(equals,[Default]), UsedName(getPiece,[Default]), UsedName(finalize,[Default]), UsedName(fromProduct,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(copy,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(MirroredMonoType,[Default]), UsedName(coordinateBelongs,[Default]), UsedName(MirroredElemLabels,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m  > by transitive inheritance: Set(game_data.board.RegularBoard)[0m
[0m[[0m[0mdebug[0m] [0m[0m  > [0m
[0m[[0m[0mdebug[0m] [0m[0m  > by member reference: Set(app.MyGameApplication, factory.board.RegularBoardFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from factory.board.RegularBoardFactory...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: factory.board.RegularBoardFactory[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(factory.board.RegularBoardFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of app.MyGameApplication: [UsedName(createBoard,[Default]), UsedName(apply,[Default]), UsedName(RegularBoardFactory,[Default])][0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(factory.board.RegularBoardFactory,ModifiedNames(changes = UsedName(##,[Default]), UsedName(MirroredLabel,[Default]), UsedName(Product;init;,[Default]), UsedName(productElementName,[Default]), UsedName(getClass,[Default]), UsedName(ne,[Default]), UsedName(Mirror;init;,[Default]), UsedName(apply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(unapply,[Default]), UsedName(productElement,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(Object;init;,[Default]), UsedName(productArity,[Default]), UsedName(Serializable;init;,[Default]), UsedName(RegularBoardFactory;init;,[Default]), UsedName(toString,[Default]), UsedName(productPrefix,[Default]), UsedName(RegularBoardFactory,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(fromProduct,[Default]), UsedName($asInstanceOf,[Default]), UsedName(createBoard,[Default]), UsedName(==,[Default]), UsedName(RegularBoardFactory;init;$,[Default]), UsedName(copy,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(MirroredMonoType,[Default]), UsedName(MirroredElemLabels,[Default]), UsedName(BoardFactory;init;,[Default]))) invalidates 2 classes due to The factory.board.RegularBoardFactory has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(##,[Default]), UsedName(MirroredLabel,[Default]), UsedName(Product;init;,[Default]), UsedName(productElementName,[Default]), UsedName(getClass,[Default]), UsedName(ne,[Default]), UsedName(Mirror;init;,[Default]), UsedName(apply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(unapply,[Default]), UsedName(productElement,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(Object;init;,[Default]), UsedName(productArity,[Default]), UsedName(Serializable;init;,[Default]), UsedName(RegularBoardFactory;init;,[Default]), UsedName(toString,[Default]), UsedName(productPrefix,[Default]), UsedName(RegularBoardFactory,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(fromProduct,[Default]), UsedName($asInstanceOf,[Default]), UsedName(createBoard,[Default]), UsedName(==,[Default]), UsedName(RegularBoardFactory;init;$,[Default]), UsedName(copy,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(MirroredMonoType,[Default]), UsedName(MirroredElemLabels,[Default]), UsedName(BoardFactory;init;,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m  > by transitive inheritance: Set(factory.board.RegularBoardFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0m  > [0m
[0m[[0m[0mdebug[0m] [0m[0m  > by member reference: Set(app.MyGameApplication)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from factory.board.BoardFactory...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: factory.board.BoardFactory[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding factory.board.RegularBoardFactory by factory.board.BoardFactory[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(factory.board.RegularBoardFactory, factory.board.BoardFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of app.MyGameApplication: [UsedName(createBoard,[Default])][0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of factory.board.RegularBoardFactory: [UsedName(BoardFactory,[Default])][0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(factory.board.BoardFactory,ModifiedNames(changes = UsedName(##,[Default]), UsedName(getClass,[Default]), UsedName(ne,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(Object;init;,[Default]), UsedName(BoardFactory,[Default]), UsedName(toString,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName($asInstanceOf,[Default]), UsedName(createBoard,[Default]), UsedName(==,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(BoardFactory;init;,[Default]))) invalidates 3 classes due to The factory.board.BoardFactory has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(##,[Default]), UsedName(getClass,[Default]), UsedName(ne,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(Object;init;,[Default]), UsedName(BoardFactory,[Default]), UsedName(toString,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName($asInstanceOf,[Default]), UsedName(createBoard,[Default]), UsedName(==,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(BoardFactory;init;,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m  > by transitive inheritance: Set(factory.board.RegularBoardFactory, factory.board.BoardFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0m  > [0m
[0m[[0m[0mdebug[0m] [0m[0m  > by member reference: Set(app.MyGameApplication, factory.board.RegularBoardFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from factory.board.board_piece_map.RegularSingleColorKinghtFactory...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: factory.board.board_piece_map.RegularSingleColorKinghtFactory[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(factory.board.board_piece_map.RegularSingleColorKinghtFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of factory.board.board_piece_map.RegularKnightsFactory: [UsedName(createPieces,[Default]), UsedName(apply,[Default]), UsedName(RegularSingleColorKinghtFactory,[Default])][0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(factory.board.board_piece_map.RegularSingleColorKinghtFactory,ModifiedNames(changes = UsedName(##,[Default]), UsedName(MirroredLabel,[Default]), UsedName(Product;init;,[Default]), UsedName(productElementName,[Default]), UsedName(getClass,[Default]), UsedName(ne,[Default]), UsedName(Mirror;init;,[Default]), UsedName(apply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(_2,[Default]), UsedName(unapply,[Default]), UsedName(productElement,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(Object;init;,[Default]), UsedName(productArity,[Default]), UsedName(Serializable;init;,[Default]), UsedName(toString,[Default]), UsedName(xPos,[Default]), UsedName(productPrefix,[Default]), UsedName(_1,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(fromProduct,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(copy,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(BoardPieceMapFactory;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(wait,[Default]), UsedName(RegularSingleColorKinghtFactory;init;,[Default]), UsedName(RegularSingleColorKinghtFactory,[Default]), UsedName(clone,[Default]), UsedName(copy$default$2,[Default]), UsedName(pieceColor,[Default]), UsedName(eq,[Default]), UsedName(MirroredMonoType,[Default]), UsedName(MirroredElemLabels,[Default]), UsedName(RegularSingleColorKinghtFactory;init;$,[Default]), UsedName(createPieces,[Default]))) invalidates 2 classes due to The factory.board.board_piece_map.RegularSingleColorKinghtFactory has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(##,[Default]), UsedName(MirroredLabel,[Default]), UsedName(Product;init;,[Default]), UsedName(productElementName,[Default]), UsedName(getClass,[Default]), UsedName(ne,[Default]), UsedName(Mirror;init;,[Default]), UsedName(apply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(_2,[Default]), UsedName(unapply,[Default]), UsedName(productElement,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(Object;init;,[Default]), UsedName(productArity,[Default]), UsedName(Serializable;init;,[Default]), UsedName(toString,[Default]), UsedName(xPos,[Default]), UsedName(productPrefix,[Default]), UsedName(_1,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(fromProduct,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(copy,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(BoardPieceMapFactory;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(wait,[Default]), UsedName(RegularSingleColorKinghtFactory;init;,[Default]), UsedName(RegularSingleColorKinghtFactory,[Default]), UsedName(clone,[Default]), UsedName(copy$default$2,[Default]), UsedName(pieceColor,[Default]), UsedName(eq,[Default]), UsedName(MirroredMonoType,[Default]), UsedName(MirroredElemLabels,[Default]), UsedName(RegularSingleColorKinghtFactory;init;$,[Default]), UsedName(createPieces,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m  > by transitive inheritance: Set(factory.board.board_piece_map.RegularSingleColorKinghtFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0m  > [0m
[0m[[0m[0mdebug[0m] [0m[0m  > by member reference: Set(factory.board.board_piece_map.RegularKnightsFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from game.RegularGame...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: game.RegularGame[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(game.RegularGame)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of app.MyGameApplication: [UsedName(RegularGame,[Default])][0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(game.RegularGame,ModifiedNames(changes = UsedName(RegularGame,[Default]), UsedName(Game;init;,[Default]), UsedName(play,[Default]))) invalidates 2 classes due to The game.RegularGame has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(RegularGame,[Default]), UsedName(Game;init;,[Default]), UsedName(play,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m  > by transitive inheritance: Set(game.RegularGame)[0m
[0m[[0m[0mdebug[0m] [0m[0m  > [0m
[0m[[0m[0mdebug[0m] [0m[0m  > by member reference: Set(app.MyGameApplication)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from factory.board.board_piece_map.RegularBishopsFactory...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: factory.board.board_piece_map.RegularBishopsFactory[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(factory.board.board_piece_map.RegularBishopsFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of factory.board.RegularBoardFactory: [UsedName(createPieces,[Default]), UsedName(apply,[Default]), UsedName(RegularBishopsFactory,[Default])][0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(factory.board.board_piece_map.RegularBishopsFactory,ModifiedNames(changes = UsedName(##,[Default]), UsedName(MirroredLabel,[Default]), UsedName(Product;init;,[Default]), UsedName(productElementName,[Default]), UsedName(getClass,[Default]), UsedName(ne,[Default]), UsedName(Mirror;init;,[Default]), UsedName(apply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(unapply,[Default]), UsedName(productElement,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(blackBishops,[Default]), UsedName(Object;init;,[Default]), UsedName(productArity,[Default]), UsedName(Serializable;init;,[Default]), UsedName(toString,[Default]), UsedName(productPrefix,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(fromProduct,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(copy,[Default]), UsedName(RegularBishopsFactory;init;$,[Default]), UsedName(synchronized,[Default]), UsedName(whiteBishops,[Default]), UsedName(isInstanceOf,[Default]), UsedName(BoardPieceMapFactory;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(MirroredMonoType,[Default]), UsedName(MirroredElemLabels,[Default]), UsedName(RegularBishopsFactory;init;,[Default]), UsedName(RegularBishopsFactory,[Default]), UsedName(createPieces,[Default]))) invalidates 2 classes due to The factory.board.board_piece_map.RegularBishopsFactory has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(##,[Default]), UsedName(MirroredLabel,[Default]), UsedName(Product;init;,[Default]), UsedName(productElementName,[Default]), UsedName(getClass,[Default]), UsedName(ne,[Default]), UsedName(Mirror;init;,[Default]), UsedName(apply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(unapply,[Default]), UsedName(productElement,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(blackBishops,[Default]), UsedName(Object;init;,[Default]), UsedName(productArity,[Default]), UsedName(Serializable;init;,[Default]), UsedName(toString,[Default]), UsedName(productPrefix,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(fromProduct,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(copy,[Default]), UsedName(RegularBishopsFactory;init;$,[Default]), UsedName(synchronized,[Default]), UsedName(whiteBishops,[Default]), UsedName(isInstanceOf,[Default]), UsedName(BoardPieceMapFactory;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(MirroredMonoType,[Default]), UsedName(MirroredElemLabels,[Default]), UsedName(RegularBishopsFactory;init;,[Default]), UsedName(RegularBishopsFactory,[Default]), UsedName(createPieces,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m  > by transitive inheritance: Set(factory.board.board_piece_map.RegularBishopsFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0m  > [0m
[0m[[0m[0mdebug[0m] [0m[0m  > by member reference: Set(factory.board.RegularBoardFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from factory.board.board_piece_map.YcoordPawnsFactory...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: factory.board.board_piece_map.YcoordPawnsFactory[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(factory.board.board_piece_map.YcoordPawnsFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of factory.board.board_piece_map.RegularPawnsFactory: [UsedName(createPieces,[Default]), UsedName(apply,[Default]), UsedName(YcoordPawnsFactory,[Default])][0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(factory.board.board_piece_map.YcoordPawnsFactory,ModifiedNames(changes = UsedName(##,[Default]), UsedName(MirroredLabel,[Default]), UsedName(Product;init;,[Default]), UsedName(_3,[Default]), UsedName(YcoordPawnsFactory;init;,[Default]), UsedName(productElementName,[Default]), UsedName(getClass,[Default]), UsedName(ne,[Default]), UsedName(Mirror;init;,[Default]), UsedName(apply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(_2,[Default]), UsedName(unapply,[Default]), UsedName(copy$default$3,[Default]), UsedName(yCoordMaxValue,[Default]), UsedName(YcoordPawnsFactory,[Default]), UsedName(productElement,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(Object;init;,[Default]), UsedName(productArity,[Default]), UsedName(Serializable;init;,[Default]), UsedName(toString,[Default]), UsedName(xPos,[Default]), UsedName(productPrefix,[Default]), UsedName(_1,[Default]), UsedName(YcoordPawnsFactory;init;$,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(fromProduct,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(copy,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(copy$default$2,[Default]), UsedName(pieceColor,[Default]), UsedName(eq,[Default]), UsedName(MirroredMonoType,[Default]), UsedName(MirroredElemLabels,[Default]), UsedName(createPieces,[Default]))) invalidates 2 classes due to The factory.board.board_piece_map.YcoordPawnsFactory has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(##,[Default]), UsedName(MirroredLabel,[Default]), UsedName(Product;init;,[Default]), UsedName(_3,[Default]), UsedName(YcoordPawnsFactory;init;,[Default]), UsedName(productElementName,[Default]), UsedName(getClass,[Default]), UsedName(ne,[Default]), UsedName(Mirror;init;,[Default]), UsedName(apply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(_2,[Default]), UsedName(unapply,[Default]), UsedName(copy$default$3,[Default]), UsedName(yCoordMaxValue,[Default]), UsedName(YcoordPawnsFactory,[Default]), UsedName(productElement,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(Object;init;,[Default]), UsedName(productArity,[Default]), UsedName(Serializable;init;,[Default]), UsedName(toString,[Default]), UsedName(xPos,[Default]), UsedName(productPrefix,[Default]), UsedName(_1,[Default]), UsedName(YcoordPawnsFactory;init;$,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(fromProduct,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(copy,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(copy$default$2,[Default]), UsedName(pieceColor,[Default]), UsedName(eq,[Default]), UsedName(MirroredMonoType,[Default]), UsedName(MirroredElemLabels,[Default]), UsedName(createPieces,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m  > by transitive inheritance: Set(factory.board.board_piece_map.YcoordPawnsFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0m  > [0m
[0m[[0m[0mdebug[0m] [0m[0m  > by member reference: Set(factory.board.board_piece_map.RegularPawnsFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from factory.board.board_piece_map.RegularKnightsFactory...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: factory.board.board_piece_map.RegularKnightsFactory[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(factory.board.board_piece_map.RegularKnightsFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of factory.board.RegularBoardFactory: [UsedName(createPieces,[Default]), UsedName(apply,[Default]), UsedName(RegularKnightsFactory,[Default])][0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(factory.board.board_piece_map.RegularKnightsFactory,ModifiedNames(changes = UsedName(##,[Default]), UsedName(MirroredLabel,[Default]), UsedName(Product;init;,[Default]), UsedName(productElementName,[Default]), UsedName(getClass,[Default]), UsedName(ne,[Default]), UsedName(Mirror;init;,[Default]), UsedName(apply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(RegularKnightsFactory;init;,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(unapply,[Default]), UsedName(productElement,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(Object;init;,[Default]), UsedName(productArity,[Default]), UsedName(Serializable;init;,[Default]), UsedName(toString,[Default]), UsedName(productPrefix,[Default]), UsedName(RegularKnightsFactory,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(RegularKnightsFactory;init;$,[Default]), UsedName(fromProduct,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(copy,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(BoardPieceMapFactory;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(MirroredMonoType,[Default]), UsedName(MirroredElemLabels,[Default]), UsedName(createPieces,[Default]))) invalidates 2 classes due to The factory.board.board_piece_map.RegularKnightsFactory has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(##,[Default]), UsedName(MirroredLabel,[Default]), UsedName(Product;init;,[Default]), UsedName(productElementName,[Default]), UsedName(getClass,[Default]), UsedName(ne,[Default]), UsedName(Mirror;init;,[Default]), UsedName(apply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(RegularKnightsFactory;init;,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(unapply,[Default]), UsedName(productElement,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(Object;init;,[Default]), UsedName(productArity,[Default]), UsedName(Serializable;init;,[Default]), UsedName(toString,[Default]), UsedName(productPrefix,[Default]), UsedName(RegularKnightsFactory,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(RegularKnightsFactory;init;$,[Default]), UsedName(fromProduct,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(copy,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(BoardPieceMapFactory;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(MirroredMonoType,[Default]), UsedName(MirroredElemLabels,[Default]), UsedName(createPieces,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m  > by transitive inheritance: Set(factory.board.board_piece_map.RegularKnightsFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0m  > [0m
[0m[[0m[0mdebug[0m] [0m[0m  > by member reference: Set(factory.board.RegularBoardFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from factory.board.board_piece_map.RegularSingleColorRooksFactory...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: factory.board.board_piece_map.RegularSingleColorRooksFactory[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(factory.board.board_piece_map.RegularSingleColorRooksFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of factory.board.board_piece_map.RegularRooksFactory: [UsedName(createPieces,[Default]), UsedName(apply,[Default]), UsedName(RegularSingleColorRooksFactory,[Default])][0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(factory.board.board_piece_map.RegularSingleColorRooksFactory,ModifiedNames(changes = UsedName(##,[Default]), UsedName(MirroredLabel,[Default]), UsedName(Product;init;,[Default]), UsedName(productElementName,[Default]), UsedName(getClass,[Default]), UsedName(ne,[Default]), UsedName(Mirror;init;,[Default]), UsedName(apply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(_2,[Default]), UsedName(unapply,[Default]), UsedName(productElement,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(Object;init;,[Default]), UsedName(productArity,[Default]), UsedName(Serializable;init;,[Default]), UsedName(toString,[Default]), UsedName(productPrefix,[Default]), UsedName(_1,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(yPos,[Default]), UsedName(fromProduct,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(RegularSingleColorRooksFactory;init;$,[Default]), UsedName(copy,[Default]), UsedName(synchronized,[Default]), UsedName(RegularSingleColorRooksFactory,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(BoardPieceMapFactory;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(copy$default$2,[Default]), UsedName(pieceColor,[Default]), UsedName(eq,[Default]), UsedName(RegularSingleColorRooksFactory;init;,[Default]), UsedName(MirroredMonoType,[Default]), UsedName(MirroredElemLabels,[Default]), UsedName(createPieces,[Default]))) invalidates 2 classes due to The factory.board.board_piece_map.RegularSingleColorRooksFactory has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(##,[Default]), UsedName(MirroredLabel,[Default]), UsedName(Product;init;,[Default]), UsedName(productElementName,[Default]), UsedName(getClass,[Default]), UsedName(ne,[Default]), UsedName(Mirror;init;,[Default]), UsedName(apply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(_2,[Default]), UsedName(unapply,[Default]), UsedName(productElement,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(Object;init;,[Default]), UsedName(productArity,[Default]), UsedName(Serializable;init;,[Default]), UsedName(toString,[Default]), UsedName(productPrefix,[Default]), UsedName(_1,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(yPos,[Default]), UsedName(fromProduct,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(RegularSingleColorRooksFactory;init;$,[Default]), UsedName(copy,[Default]), UsedName(synchronized,[Default]), UsedName(RegularSingleColorRooksFactory,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(BoardPieceMapFactory;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(copy$default$2,[Default]), UsedName(pieceColor,[Default]), UsedName(eq,[Default]), UsedName(RegularSingleColorRooksFactory;init;,[Default]), UsedName(MirroredMonoType,[Default]), UsedName(MirroredElemLabels,[Default]), UsedName(createPieces,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m  > by transitive inheritance: Set(factory.board.board_piece_map.RegularSingleColorRooksFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0m  > [0m
[0m[[0m[0mdebug[0m] [0m[0m  > by member reference: Set(factory.board.board_piece_map.RegularRooksFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from factory.board.board_piece_map.RegularRooksFactory...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: factory.board.board_piece_map.RegularRooksFactory[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(factory.board.board_piece_map.RegularRooksFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of factory.board.RegularBoardFactory: [UsedName(createPieces,[Default]), UsedName(apply,[Default]), UsedName(RegularRooksFactory,[Default])][0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(factory.board.board_piece_map.RegularRooksFactory,ModifiedNames(changes = UsedName(##,[Default]), UsedName(MirroredLabel,[Default]), UsedName(Product;init;,[Default]), UsedName(productElementName,[Default]), UsedName(getClass,[Default]), UsedName(ne,[Default]), UsedName(Mirror;init;,[Default]), UsedName(apply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(unapply,[Default]), UsedName(productElement,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(Object;init;,[Default]), UsedName(productArity,[Default]), UsedName(Serializable;init;,[Default]), UsedName(toString,[Default]), UsedName(RegularRooksFactory;init;$,[Default]), UsedName(productPrefix,[Default]), UsedName(whiteRooks,[Default]), UsedName(RegularRooksFactory,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(fromProduct,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(copy,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(BoardPieceMapFactory;init;,[Default]), UsedName(RegularRooksFactory;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(blackRooks,[Default]), UsedName(MirroredMonoType,[Default]), UsedName(MirroredElemLabels,[Default]), UsedName(createPieces,[Default]))) invalidates 2 classes due to The factory.board.board_piece_map.RegularRooksFactory has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(##,[Default]), UsedName(MirroredLabel,[Default]), UsedName(Product;init;,[Default]), UsedName(productElementName,[Default]), UsedName(getClass,[Default]), UsedName(ne,[Default]), UsedName(Mirror;init;,[Default]), UsedName(apply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(unapply,[Default]), UsedName(productElement,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(Object;init;,[Default]), UsedName(productArity,[Default]), UsedName(Serializable;init;,[Default]), UsedName(toString,[Default]), UsedName(RegularRooksFactory;init;$,[Default]), UsedName(productPrefix,[Default]), UsedName(whiteRooks,[Default]), UsedName(RegularRooksFactory,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(fromProduct,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(copy,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(BoardPieceMapFactory;init;,[Default]), UsedName(RegularRooksFactory;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(blackRooks,[Default]), UsedName(MirroredMonoType,[Default]), UsedName(MirroredElemLabels,[Default]), UsedName(createPieces,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m  > by transitive inheritance: Set(factory.board.board_piece_map.RegularRooksFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0m  > [0m
[0m[[0m[0mdebug[0m] [0m[0m  > by member reference: Set(factory.board.RegularBoardFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from factory.board.board_piece_map.RegularSingleColorBishopFactory...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: factory.board.board_piece_map.RegularSingleColorBishopFactory[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(factory.board.board_piece_map.RegularSingleColorBishopFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of factory.board.board_piece_map.RegularBishopsFactory: [UsedName(createPieces,[Default]), UsedName(apply,[Default]), UsedName(RegularSingleColorBishopFactory,[Default])][0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(factory.board.board_piece_map.RegularSingleColorBishopFactory,ModifiedNames(changes = UsedName(##,[Default]), UsedName(MirroredLabel,[Default]), UsedName(Product;init;,[Default]), UsedName(productElementName,[Default]), UsedName(getClass,[Default]), UsedName(ne,[Default]), UsedName(Mirror;init;,[Default]), UsedName(apply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(_2,[Default]), UsedName(unapply,[Default]), UsedName(productElement,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(Object;init;,[Default]), UsedName(productArity,[Default]), UsedName(Serializable;init;,[Default]), UsedName(toString,[Default]), UsedName(productPrefix,[Default]), UsedName(_1,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(yPos,[Default]), UsedName(fromProduct,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(RegularSingleColorBishopFactory;init;,[Default]), UsedName(copy,[Default]), UsedName(RegularSingleColorBishopFactory;init;$,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(BoardPieceMapFactory;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(copy$default$2,[Default]), UsedName(pieceColor,[Default]), UsedName(eq,[Default]), UsedName(MirroredMonoType,[Default]), UsedName(MirroredElemLabels,[Default]), UsedName(createPieces,[Default]), UsedName(RegularSingleColorBishopFactory,[Default]))) invalidates 2 classes due to The factory.board.board_piece_map.RegularSingleColorBishopFactory has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(##,[Default]), UsedName(MirroredLabel,[Default]), UsedName(Product;init;,[Default]), UsedName(productElementName,[Default]), UsedName(getClass,[Default]), UsedName(ne,[Default]), UsedName(Mirror;init;,[Default]), UsedName(apply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(_2,[Default]), UsedName(unapply,[Default]), UsedName(productElement,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(Object;init;,[Default]), UsedName(productArity,[Default]), UsedName(Serializable;init;,[Default]), UsedName(toString,[Default]), UsedName(productPrefix,[Default]), UsedName(_1,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(yPos,[Default]), UsedName(fromProduct,[Default]), UsedName($asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(RegularSingleColorBishopFactory;init;,[Default]), UsedName(copy,[Default]), UsedName(RegularSingleColorBishopFactory;init;$,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(BoardPieceMapFactory;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(wait,[Default]), UsedName(clone,[Default]), UsedName(copy$default$2,[Default]), UsedName(pieceColor,[Default]), UsedName(eq,[Default]), UsedName(MirroredMonoType,[Default]), UsedName(MirroredElemLabels,[Default]), UsedName(createPieces,[Default]), UsedName(RegularSingleColorBishopFactory,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m  > by transitive inheritance: Set(factory.board.board_piece_map.RegularSingleColorBishopFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0m  > [0m
[0m[[0m[0mdebug[0m] [0m[0m  > by member reference: Set(factory.board.board_piece_map.RegularBishopsFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mNew invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Main[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Main[0m
[0m[[0m[0mdebug[0m] [0m[0mPreviously invalidated, but (transitively) depend on new invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0mFinal step, transitive dependencies:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set(Main)[0m
[0m[[0m[0mdebug[0m] [0m[0mNo classes were invalidated.[0m
